.final-round(v-if="round.phase == 'FINAL ROUND'")
  video.fullscreen(muted autoplay loop poster="img/polygons.jpg")
    source(src="video/polygons.mp4")
  .interface

    .inside
      template(v-if="!ui.enterFinalPasswords")
        h1 This is the final round!
        p In the final round, your goal is to hack into accounts of your coworkers.
        p When the timer starts, type in any password you think any of your coworkers may have used successfully. If you're right, you'll 
          em steal 
          | 40 points from that player!
        p You can type as many passwords as you like, but if you crack your own password, you will be punished.
        p There are {{computedUnclaimedPasswords}} crackable passwords in the system.
        h2 Round begins in {{round.hurryTime}} seconds.

        
      template(v-if="ui.enterFinalPasswords")

        h2.success(v-if="ui.passwordSuccessMessage") Success!
        h2(v-else) Crack your Coworkers
        form.password-form(@submit.prevent="tryToCrackWith(ui.passwordAttempt)")
          fieldset
            input(type="text" v-model="ui.passwordAttempt" id="PasswordAttempt" :class="{ 'error' : ui.passwordInputError }" autocomplete="off" required v-focus)
            label(for="PasswordAttempt") Enter A Password
              sup.required *
          .button-holder
            button(type="submit") Submit
        .password-errors(v-if="ui.passwordAttemptErrors && ui.passwordAttemptErrors.length > 0")
          .error(v-if="ui.passwordAttemptErrors.length == 1") {{ui.passwordAttemptErrors[0]}}
          ul(v-if="ui.passwordAttemptErrors.length > 1")
            li.error(v-for="(err,index) in ui.passwordAttemptErrors") {{err}}

        .success(v-if="ui.passwordSuccessMessage")
          p.success {{ui.passwordSuccessMessage}}
        
        p.there-are-unclaimed There are 
          span.count {{computedUnclaimedPasswords}}
          |  unclaimed passwords in the system.

  .round-reminder(:class="{'visible': (round.hurryTime <= 10)}")
    h3 Played rounds...
    ol
      li(v-for="round in roundSummary") 
        .challenge-name {{round.challenge}}
        ul
          template(v-for="rule in round.rules")
            li(v-if="rule.type=='Demand A Letter'") Required 
              strong {{rule.inputValue}} 
            li(v-if="rule.type=='Ban A Letter'") Banned 
              strong {{rule.inputValue}} 
            li(v-if="rule.type=='Ban A Combo'") Can't use 
              strong {{rule.inputValue}} 
              | with 
              strong {{rule.inputValueTwo}}
            li(v-if="rule.type=='Set A Minimum'") Min of 
              strong {{rule.inputValue}}
            li(v-if="rule.type=='Set A Maximum'") Max of 
              strong {{rule.inputValue}}
            li(v-if="rule.type=='Limit Vowels'") Vowel limit of 
              strong {{rule.inputValue}}
            

  .timer.final-timer(v-if="round.roundTimer != undefined")
    time {{round.finalTimeLeft}}

  include _scores
    